import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import {getCookie, getMyData, getPlaylists, getTracks, getMyPlayListTrackTotal, test, spotifyApi} from '../../user_data_methods';


const initialState = {
  playlistName: '',
  index: 0,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getPlaylistName = createAsyncThunk(
  'playlistButton/getPlaylist',
  async () => {
    const res = await getPlaylists();
    // The value we return becomes the `fulfilled` action payload
    return res[0].name;
  }
);

export const AppSlice = createSlice({
  name: 'app',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    getPlaylist: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.playlistName = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.

});

export const { getPlaylist } = playlistButtonSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectPlaylist = (state) => state.playlistButton.playlistName;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default playlistButtonSlice.reducer;
